import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:ta_visualisasi/configure/constants.dart';
import 'package:ta_visualisasi/menu_utama/menu_body.dart';
import 'package:ta_visualisasi/pilih_plat/penambahan_plat.dart';

final databaseRef = FirebaseDatabase.instance.reference().child("DataKendaraan");
class DataPlat extends StatefulWidget {
  // const DataPlat({Key? key});
  const DataPlat({Key? key, required this.email}) : super(key: key);
  final String email;

  @override
  State<DataPlat> createState() => _DataPlatState();
}

class _DataPlatState extends State<DataPlat> {

  List<String> kendaraanPlat = [];
  Map<String, dynamic> selectedData = {}; // Menyimpan data kendaraan yang dipilih

  String? selectedValue;
  final TextEditingController textEditingController = TextEditingController();

  @override
  void initState() {
    super.initState();
    fetchDataFromFirebase();
  }

  void fetchDataFromFirebase() {
    databaseRef.orderByChild('email').equalTo(widget.email).onValue.listen((event) {
    // databaseRef.onValue.listen((event) {
      final DataSnapshot snapshot = event.snapshot;
      if (snapshot.value != null && snapshot.value is Map<dynamic, dynamic>) {
        final Map<dynamic, dynamic> values = snapshot.value as Map<dynamic, dynamic>;
        kendaraanPlat.clear(); // Membersihkan daftar sebelum menambahkan data yang baru
        values.forEach((key, value) {
          // final plat = value[widget.email] as String?;
          final plat = value["Plat"] as String?;
          if (plat != null) {
            kendaraanPlat.add(plat);
          }
          print("isi data kendaraan: $kendaraanPlat");
        });
        setState(() {});
      }
    }, onError: (error) {
      print("Error fetching data from Firebase: $error");
    });
  }

  @override
  void dispose() {
    textEditingController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(

        backgroundColor: Color.fromRGBO(234, 186, 103, 1.0),
        elevation: 0,
        iconTheme: IconThemeData(color: Colors.black87),
        centerTitle: true,
        title: Text("Pilih Kendaraan", style: TextStyle(color: Colors.black87)),
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            children: [
              SizedBox(height: 30,),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).push(
                      MaterialPageRoute(
                        builder: (context) => AddDataPlat(email: widget.email),
                      ),
                    );
                  },
                  style: ButtonStyle(
                    shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                      RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15),
                      ),
                    ),
                    backgroundColor: MaterialStateProperty.all<Color>(
                        button
                    ),
                  ),
                  child:
                  Text('Pengaturan Data Kendaraan', style: TextStyle(color: Colors.black),),
                ),
              ),
              const SizedBox(
                height: 20,
              ),
              Text('Silahkan Pilih Plat Kendaraan Anda!', style: TextStyle(fontWeight: FontWeight.bold,color: Colors.black),),
              SizedBox(
                height: 10,
              ),
              DropdownButtonHideUnderline(
                child: DropdownButton2<String>(
                  isExpanded: false,
                  hint: Text(
                    'Silahkan Pilih Plat',
                    style: TextStyle(
                      fontSize: 14,
                      color: Theme.of(context).hintColor,
                    ),
                  ),
                  items: kendaraanPlat
                      .map((item) => DropdownMenuItem<String>(
                    value: item,
                    child: Text(
                      item,
                      style: const TextStyle(
                        fontSize: 14,
                      ),
                    ),
                  ))
                      .toList(),
                  value: selectedValue,
                  onChanged: (value) {
                    setState(() {
                      selectedValue = value;
                      // Saat item dipilih, data akan diperbarui secara real-time.
                      selectedData = {}; // Kosongkan data terlebih dahulu
                      databaseRef
                          .orderByChild("Plat")
                          .equalTo(selectedValue)
                          .onValue
                          .listen((event) {
                        final DataSnapshot snapshot = event.snapshot;
                        final dynamic snapshotValue = snapshot.value;
                        if (snapshotValue != null && snapshotValue is Map<dynamic, dynamic>) {
                          selectedData = Map<String, dynamic>.from(snapshotValue);
                          print(selectedValue);
                          print('select data $selectedData');
                        } else {
                          // Tangani kesalahan jika tipe data tidak sesuai
                          print("Invalid data received from Firebase.");
                        }
                        setState(() {});
                      });
                    });
                  },
                  buttonStyleData: const ButtonStyleData(
                    padding: EdgeInsets.symmetric(horizontal: 16),
                    height: 50,
                    width: 300,
                    decoration: BoxDecoration(
                      color: button,
                      borderRadius: BorderRadius.all(Radius.circular(10))
                    )
                    // height: 40,
                    // width: 200,
                  ),
                  dropdownStyleData: const DropdownStyleData(
                    maxHeight: 200,
                  ),
                  menuItemStyleData: const MenuItemStyleData(
                    height: 40,
                  ),
                  dropdownSearchData: DropdownSearchData(
                    searchController: textEditingController,
                    searchInnerWidgetHeight: 50,
                    searchInnerWidget: Container(
                      height: 50,
                      padding: const EdgeInsets.only(
                        top: 8,
                        bottom: 4,
                        right: 8,
                        left: 8,
                      ),
                      child: TextFormField(
                        expands: true,
                        maxLines: null,
                        controller: textEditingController,
                        decoration: InputDecoration(
                          isDense: true,
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 10,
                            vertical: 8,
                          ),
                          hintText: 'Search for an item...',
                          hintStyle: const TextStyle(fontSize: 12),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                    ),
                  ),
                  //This to clear the search value when you close the menu
                  onMenuStateChange: (isOpen) {
                    if (!isOpen) {
                      textEditingController.clear();
                    }
                  },
                ),
              ),
              SizedBox(height: 5,),
              // Menambahkan daftar nomor plat di bawah dropdown
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                  width: MediaQuery.of(context).size.width / 1,
                  height: MediaQuery.of(context).size.height / 2.25,
                  child: Card(
                    child: ListView.builder(
                      shrinkWrap: true,
                      itemCount: kendaraanPlat.length,
                      itemBuilder: (BuildContext context, int index) {
                        final plat = kendaraanPlat[index];
                        return ListTile(
                          title: Text(plat),
                          onTap: () {
                            setState(() {
                              selectedValue = plat;
                              // Saat item dipilih, data akan diperbarui secara real-time.
                              selectedData = {}; // Kosongkan data terlebih dahulu
                              databaseRef
                                  .orderByChild("Plat")
                                  .equalTo(selectedValue)
                                  .onValue
                                  .listen((event) {
                                final DataSnapshot snapshot = event.snapshot;
                                final dynamic snapshotValue = snapshot.value;
                                if (snapshotValue != null && snapshotValue is Map<dynamic, dynamic>) {
                                  selectedData = Map<String, dynamic>.from(snapshotValue);
                                  print(selectedValue);
                                  print('select data $selectedData');
                                } else {
                                  // Tangani kesalahan jika tipe data tidak sesuai
                                  print("Invalid data received from Firebase.");
                                }
                                setState(() {});
                              });
                            });
                          },
                        );
                      },
                    ),
                  ),
                ),
              ),
              SizedBox(
                height: 10,
              ),
              // Menampilkan data kendaraan yang dipilih di sini
              selectedData.isNotEmpty
                  ? Column(
                children: selectedData.entries.map((entry) {
                  final key = entry.key;
                  final data = entry.value;
                  return Card(
                    elevation: 2,
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "Jenis Kendaraan: ${data['JenisKendaraan']}",
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),
                          Text("No Mesin: ${data['NoMesin']}"),
                          Text("Plat: ${data['Plat']}"),
                        ],
                      ),
                    ),
                  );
                }).toList(),
              )
                  : Container(),
              SizedBox(height: 10,),
              SizedBox(
                height: 45,
                width: MediaQuery.of(context).size.width / 2.25,
                child: ElevatedButton(
                  onPressed: () {
                    if (selectedValue != null) {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (context) => BodyMenu(email: selectedValue!),
                        ),
                      );
                    }
                  },
                  style: ButtonStyle(
                    shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                      RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    backgroundColor: MaterialStateProperty.all<Color>(
                        button
                    ),
                  ),
                  child: Text('Setuju', style: TextStyle(color: Colors.black),),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
